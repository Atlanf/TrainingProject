@using TrainingProject.Client.Helpers

@inject HttpClient HttpClient

<form>
    <div class="shadow p-4 mb-4 bg-white">
        <div class="container-fluid">
            <div class="text-justify">
                <h4>@QuestionModel.Description</h4>
            </div>
            <fieldset class="form-group">
                <div class="row">
                    <div class="col-sm-10">
                        @if (QuestionModel.MultipleAnswers)
                        {

                            @foreach (var choice in QuestionModel.Choices)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="@choice" name="@QuestionModel.QuestionId" value="@choice" @onchange="(e => AssignValueCheckbox(e, QuestionModel.Choices.IndexOf(choice)))" />
                                    <label class="form-check-label" for="@choice">@choice</label><br>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-sm-10">
                                    @foreach (var choice in QuestionModel.Choices)
                                    {
                                        <div class="form-check">
                                            <input type="radio" id="@choice" name="@QuestionModel.QuestionId" value="@choice" @onchange="(e => AssignValueRadio(e, QuestionModel.Choices.IndexOf(choice)))" />
                                            <label for="@choice">@choice</label><br>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </fieldset>
        </div>
        <div class="form-group row">
            <div class="col-sm-10">
                <input class="btn btn-primary" type="button" value="Submit answer" @onclick="AnswerQuestion" />
            </div>
        </div>
    </div>
    <br />
</form>

@code {
    [Parameter]
    public int ComponentId { get; set; }

    [Parameter]
    public QuestionDTO QuestionModel { get; set; }

    [Parameter]
    public EventCallback<HelperAnswerResult> OnAnswer { get; set; }

    protected AnswerDTO CorrectAnswer { get; set; }

    public AnswerResultDTO Result { get; set; }

    public List<int> UserChoices { get; set; } = new List<int>();

    public bool ErrorOccured { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync($"api/test/answer/{QuestionModel.QuestionId}");

        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch(HttpRequestException ex)
        {
            ErrorOccured = true;
        }

        CorrectAnswer = await response.Content.ReadAsJsonAsync<AnswerDTO>();

        Result = new AnswerResultDTO()
        {
            QuestionId = CorrectAnswer.QuestionId,
            IsCorrect = false
        };
    }

    protected void AssignValueCheckbox(ChangeEventArgs e, int choice)
    {
        choice += 1;
        if (UserChoices.Contains(choice))
        {
            UserChoices.Remove(choice);
        }
        else
        {
            UserChoices.Add(choice);
        }
    }

    protected void AssignValueRadio(ChangeEventArgs e, int choice)
    {
        choice += 1;
        UserChoices.Clear();
        UserChoices.Add(choice);
    }

    private QuestionAnswerDTO SetValues()
    {
        return new QuestionAnswerDTO()
        {
            QuestionId = QuestionModel.QuestionId,
            Choices = UserChoices
        };
    }

    protected void AnswerQuestion()
    {
        Result = new AnswerResultDTO() { QuestionId = CorrectAnswer.QuestionId, IsCorrect = false };
        if (UserChoices.SequenceEqual(CorrectAnswer.CorrectAnswers))
        {
            Result.QuestionId = CorrectAnswer.QuestionId;
            Result.IsCorrect = true;
        }
        OnAnswer.InvokeAsync(new HelperAnswerResult()
        {
            AnswerResult = Result,
            QuestionPosition = ComponentId
        });
    }

    protected void AnswerSubmited(ChangeEventArgs e)
    {

    }

    // Check Blazor Render Fragment

    //public string QuestionBgStyle { get; set; }

    //private void ChangeBgColor()
    //{
    //    if (Result.IsCorrect)
    //    {
    //        QuestionBgStyle = "background-color: rgba(17, 223, 44, 0.31)";
    //    }
    //    else
    //    {
    //        QuestionBgStyle = "background-color: rgba(223, 17, 17, 0.31)";
    //    }
    //}

    //protected override void OnParametersSet()
    //{
    //    if (Result != null)
    //    {
    //        ChangeBgColor();
    //    }
    //}
}
