@inject HttpClient HttpClient

@attribute [Authorize(Roles = "Administrator")]

@if (Success)
{
    <div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Success!</h4>
        <p>New test has been added.</p>
    </div>
}

<EditForm Model="testModel" OnValidSubmit="CreateTest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Select category</span>
        </div>
        <select class="form-control" id="category" @onchange="SetCategory">
            @if (categories != null)
            {
                <option value="" selected></option>
                @foreach (var cat in categories)
                {
                    <option value="@cat.CategoryName">@cat.CategoryName</option>
                }
            }
        </select>
    </div>

    <div class="form-group row input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Name of test</span>
        </div>
        <input type="text" class="form-control" @bind-value="testModel.TestName" />
    </div>

    <div class="form-group row input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Short name</span>
        </div>
        <input type="text" class="form-control" @bind-value="testModel.ShortName" />
    </div>

    <div class="form-group row input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Maximum questions for 1 test</span>
        </div>
        <input type="number" class="form-control" @bind-value="testModel.MaxQuestions" />
    </div>

    <div class="form-group row input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">Description</span>
        </div>
        <textarea class="form-control" @bind="testModel.TestDescription" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>


@code {
    protected bool Success { get; set; } = false;
    protected bool ErrorOccured { get; set; } = false;
    protected List<TestCategoryDTO> categories { get; set; }

    protected CreateTestDTO testModel { get; set; } = new CreateTestDTO();

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("/api/Admin/test/get");

        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
            return;
        }

        categories = await response.Content.ReadAsJsonAsync<List<TestCategoryDTO>>();
    }

    protected async Task CreateTest()
    {
        Success = false;
        var response = await HttpClient.PostJsonAsync("api/Admin/test/create", testModel);

        try
        {
            response.EnsureSuccessStatusCode();
            Success = true;
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
            return;
        }
    }

    protected void SetCategory(ChangeEventArgs e)
    {
        testModel.CategoryName = e.Value.ToString();
    }
}
