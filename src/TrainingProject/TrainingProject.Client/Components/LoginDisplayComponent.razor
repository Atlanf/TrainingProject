@inject HttpClient HttpClient
@inject IModalService Modal
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="">
    <AuthorizeView>
        <Authorizing>
            <text>...</text>
        </Authorizing>
        <Authorized>
            <div>
                <span class="">@CurrentUser.Name</span>
                <a class="" href="user/signout">Выйти</a>
            </div>
        </Authorized>
        <NotAuthorized>
            <div>
                <input type="button" @onclick="ShowLoginComponent" value="Sign In" />
            </div>
            <div>
                <NavLink class="" href="" @onclick="ShowRegisterComponent">Регистрация</NavLink>
                <a class="" href="user/register">Регистрация</a>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    protected bool ErrorOccured { get; set; } = false;

    public string ErrorMessage { get; set; }

    public UserInfo CurrentUser { get; set; } = new UserInfo();

    //[CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public async Task ShowLoginComponent()
    {
        var formModal = Modal.Show<SigninComponent>("Вход");

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            var response = await HttpClient.PostJsonAsync($"api/user/signin", result.Data as LoginDTO);

            try
            {
                response.EnsureSuccessStatusCode();

                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

                var user = authState.User;

                //HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("cookie", user.Claims);

                if (user.Identity.IsAuthenticated)
                {
                    CurrentUser.IsAuthenticated = true;
                    CurrentUser.Name = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name).Value;
                    CurrentUser.Role = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role).Value;
                }
            }
            catch (HttpRequestException httpRequestEx)
            {
                ErrorOccured = true;
                ErrorMessage = "Ошибка при входе.";
            }
        }
    }

    public async Task ShowRegisterComponent()
    {
        var formModal = Modal.Show<RegistrationComponent>("Регистрация");

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            var response = await HttpClient.PostJsonAsync($"user/register", result.Data as RegistrationDTO);

            try
            {
                response.EnsureSuccessStatusCode();
            }
            catch (HttpRequestException httpRequestEx)
            {
                ErrorOccured = true;
                ErrorMessage = "Ошибка при регистрации.";
            }

        }
    }
}
