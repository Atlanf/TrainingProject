@inject HttpClient HttpClient
@inject IModalService Modal
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}

<div class="">
    <AuthorizeView>
        <Authorizing>
            <text>...</text>
        </Authorizing>
        <Authorized>
            <div>
                <span class="">@context.User.Identity.Name</span>
                <br />
                <input type="button" @onclick="Signout" value="Sign Out"/>
            </div>
        </Authorized>
        <NotAuthorized>
            <div>
                <input type="button" @onclick="ShowLoginComponent" value="Sign In" />
            </div>
            <div>
                <input type="button" @onclick="ShowRegisterComponent" value="Register" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    protected bool ErrorOccured { get; set; } = false;

    public string ErrorMessage { get; set; }

    public UserInfo CurrentUser { get; set; } = new UserInfo();

    [CascadingParameter] Task<AuthenticationState> AuthState { get; set; }

    //private LoginDTO loginModel = new LoginDTO();

    private bool ShowErrors = false;
    private IList<string> Errors = new List<string>();

    public async Task ShowLoginComponent()
    {
        ShowErrors = false;

        var formModal = Modal.Show<SigninComponent>("Sign In");

        var loginFormResult = await formModal.Result;

        if (!loginFormResult.Cancelled)
        {
            var loginModel = loginFormResult.Data as LoginDTO;

            var result = await AuthService.Login(loginModel);

            if (result.Successful)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Errors.Clear();
                Errors.Add(result.Error);
                ShowErrors = true;
            }
        }
    }

    public async Task ShowRegisterComponent()
    {
        ShowErrors = false;

        var formModal = Modal.Show<RegistrationComponent>("Register");

        var registerFormResult = await formModal.Result;

        if (!registerFormResult.Cancelled)
        {
            var registrationModel = registerFormResult.Data as RegisterDTO;

            var result = await AuthService.Register(registrationModel);

            if (result.Successful)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Errors.Clear();
                Errors = result.Errors;
                ShowErrors = true;
            }
        }
    }

    public async Task Signout()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/");
    }
}




@*public async Task ShowLoginComponent()
    {
        var formModal = Modal.Show<SigninComponent>
    ("Sign In");

    var result = await formModal.Result;

    if (!result.Cancelled)
    {
    var response = await HttpClient.PostJsonAsync($"api/user/signin", result.Data as LoginDTO);

    try
    {
    response.EnsureSuccessStatusCode();

    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

    var user = authState.User;

    //if (user.Identity.IsAuthenticated)
    //{
    //    CurrentUser.IsAuthenticated = true;
    //    CurrentUser.Name = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name).Value;
    //    CurrentUser.Role = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role).Value;
    //}

    //var user = (await AuthState).User;

    if (user.Identity.IsAuthenticated)
    {
    if (user.IsInRole("Administrator"))
    {

    }
    }

    }
    catch (HttpRequestException httpRequestEx)
    {
    ErrorOccured = true;
    ErrorMessage = "Ошибка при входе.";
    }
    }
    }*@
