@inject HttpClient HttpClient

@attribute [Authorize]

<div>
    <div class="">
        <EditForm Model="questionModel" OnValidSubmit="CreateQuestion">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <div class="form-group row input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Description</span>
                    </div>
                    <textarea class="form-control" placeholder="Description" @bind="questionModel.QuestionDescription" />
                </div>
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="multiple" @bind-value="questionModel.MultipleAnswers" />
                        <label class="form-check-label" for="multiple">More than 1 correct answers</label>
                    </div>
                </div>
                <div class="btn-group" role="group">
                    <button class="btn btn-primary" @onclick="IncreaseCounter">+</button>
                    <button class="btn btn-primary" @onclick="DecreaseCounter">-</button>
                </div>
                @if (questionModel.MultipleAnswers)
                {
                    _controlType = "checkbox";
                }
                else
                {
                    _controlType = "radio";
                }

                @if (questionModel.Choices != null && questionModel.Answers != null)
                {
                    for (int i = 0; i < questionModel.Choices.Count; i++)
                    {
                        int index = i;
                        <div class="input-group row">
                            <div class="col">
                                <input type="@_controlType" name="answer" @onchange="(() => OnChangeAnswer(index, _controlType))" />
                                <input type="text" class="form-control" @bind="questionModel.Choices[index]" />
                            </div>
                        </div>
                    }
                }

                @*@if (questionModel.Choices != null && questionModel.Answers != null)
                    {
                        for (int i = 0; i < questionModel.Choices.Count; i++)
                        {
                            int index = i;
                            <input type="@_controlType" name="answer" @onchange="(() => OnChangeAnswer(index, _controlType))" />
                            <input type="text" @bind-value="questionModel.Choices[index]" />
                        }
                    }*@
                <br />

                <div class="form-group row">
                    <input class="btn btn-block btn-primary" type="submit" value="Submit" />
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {

    [Parameter]
    public string TestId { get; set; }

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    public CreateQuestionDTO questionModel { get; set; }

    private int _choicesCount { get; set; } = 2;

    private string _controlType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        questionModel = new CreateQuestionDTO() { Answers = new List<int>(), Choices = new List<string>(2) { "test", "test" } };
    }

    protected async Task CreateQuestion()
    {
        BlazoredModal.Close(ModalResult.Ok<CreateQuestionDTO>(FillQuestionId(questionModel)));
    }

    private CreateQuestionDTO FillQuestionId(CreateQuestionDTO model)
    {
        model.TestId = Convert.ToInt32(TestId);
        model.UserId = 1; // Change to current user id
        return model;
    }

    protected void IncreaseCounter()
    {
        if (_choicesCount >= 2 && _choicesCount < 4)
        {
            _choicesCount++;
            ChangeCollection('+');
        }
    }

    protected void DecreaseCounter()
    {
        if (_choicesCount > 2 && _choicesCount <= 4)
        {
            _choicesCount--;
            ChangeCollection('-');
        }
    }

    private void ChangeCollection(char c)
    {
        // JSRuntime.InvokeVoidAsync("uncheckElements");
        questionModel.Answers.Clear();
        if (c == '+')
        {
            questionModel.Choices.Add("");
        }
        else if (c == '-')
        {
            questionModel.Choices.RemoveAt(questionModel.Choices.Count - 1);
        }
    }

    private void OnChangeAnswer(int i, string controlType)
    {
        var value = i + 1;
        if (controlType == "checkbox")
        {
            if (!questionModel.Answers.Contains(value))
            {
                questionModel.Answers.Add(value);
            }
            else
            {
                questionModel.Answers.Remove(value);
            }
        }
        else if (controlType == "radio")
        {
            questionModel.Answers.Clear();
            questionModel.Answers.Add(value);
        }
    }
}
