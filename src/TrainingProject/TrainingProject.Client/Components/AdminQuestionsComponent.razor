@using TrainingProject.Domain.Models.Admin;

@inject HttpClient HttpClient

@attribute [Authorize(Roles = "Administrator")]

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search by test name" @bind-value="_searchTerm" aria-describedby="basic-addon-2" />
    <div class="input-group-append btn-group">
        <button class="btn btn-primary" @onclick="ProcessSearch">Search</button>
        <button class="btn btn-primary" @onclick="ClearSearchTerm">Clear</button>
        <select class="custom-select" id="filterSelect" @onchange="ProcessFilter">
            @if (QuestionCategories != null)
            {
                <option value="" selected></option>
                @foreach (var cat in QuestionCategories)
                {
                    <option value="@cat">@cat</option>
                }
            }
        </select>
    </div>
</div>

@if (AllQuestions != null)
{
    if (AllQuestions.Count == 0)
    {
        <h3 class="content h2">Right now there's no questions to approve</h3>
    }
    foreach (var q in QuestionList)
    {
        <form>
            <div class="shadow p-4 mb-4 bg-white">
                <div class="container-fluid">
                    @{
                        int index = q.QuestionId;
                    }
                    <div class="text-justify">
                        <h3 class="content h3">@q.TestName</h3>
                    </div>
                    <div class="text-justify">
                        @q.Description
                    </div>
                    <br />
                    <fieldset class="form-group">
                        <div class="row">
                            <div class="col-sm-10">
                                <ul class="list-group">
                                    @foreach (var choice in q.Choices)
                                    {
                                        <li class="list-group-item">
                                            @choice
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </fieldset>
                    <label for="Approve">Approve</label>
                    <input type="radio" name="question" id="Approve" @onchange="(() => OnChangeValue(index, 'a'))" />
                    <label for="Delete">Delete</label>
                    <input type="radio" name="question" id="Delete" value="Delete" @onchange="(() => OnChangeValue(index, 'd'))" />
                </div>
                <div class="form-group row">
                    <div class="col-sm-10">
                        <input class="btn btn-primary" type="submit" value="OK" @onclick="UpdateQuestion" />
                    </div>
                </div>
            </div>
        </form>

        <br />
    }
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@code {
    private int _currentPage { get; set; } = 0;
    private int _pageSize { get; set; } = 10;

    public List<QuestionToApproveDTO> AllQuestions = new List<QuestionToApproveDTO>();
    public List<QuestionToApproveDTO> QuestionList = new List<QuestionToApproveDTO>();

    public ApproveQuestionDTO QuestionApprovement { get; set; } = new ApproveQuestionDTO();

    protected bool ErrorOccured { get; set; } = false;
    protected string ErrorMessage { get; set; } = "";

    private List<string> QuestionCategories { get; set; }

    private bool _filter { get; set; } = false;
    private bool _search { get; set; } = false;
    private string _searchTerm { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("api/admin/questions");
        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
            return;
        }

        AllQuestions = await response.Content.ReadAsJsonAsync<List<QuestionToApproveDTO>>();
        QuestionList = AllQuestions;

        QuestionCategories = ExtractCategories(AllQuestions);
    }

    protected async Task UpdateQuestion()
    {
        if (QuestionApprovement.QuestionApproved == !QuestionApprovement.DeleteQuestion)
        {
            var response = await HttpClient.PutJsonAsync("api/Admin", QuestionApprovement);

            try
            {
                response.EnsureSuccessStatusCode();
            }
            catch (HttpRequestException ex)
            {
                ErrorOccured = true;
                return;
            }
        }
    }

    private void OnChangeValue(int i, char action)
    {
        QuestionApprovement.QuestionId = i;
        if (action == 'a')
        {
            QuestionApprovement.QuestionApproved = true;
            QuestionApprovement.DeleteQuestion = false;
        }
        else if (action == 'd')
        {
            QuestionApprovement.QuestionApproved = false;
            QuestionApprovement.DeleteQuestion = true;
        }
    }

    public void ProcessSearch()
    {
        if (_searchTerm == "")
        {
            QuestionList = AllQuestions;
            _search = false;
        }
        else
        {
            _search = true;
            if (!_filter)
            {
                QuestionList = AllQuestions;
            }
            QuestionList = QuestionList.Where(c => c.Description.ToLower().Contains(_searchTerm.ToLower())).ToList();
        }
    }

    public void ProcessFilter(ChangeEventArgs e)
    {
        var filterTerm = e.Value.ToString();
        if (filterTerm == "")
        {
            QuestionList = AllQuestions;
            _filter = false;
        }
        else
        {
            _filter = true;
            QuestionList = AllQuestions;
            if (_search)
            {
                ProcessSearch();
            }
            QuestionList = QuestionList
                .Where(category => category.CategoryName == filterTerm)
                .ToList();
        }
    }

    public void ClearSearchTerm()
    {
        _searchTerm = "";
        _search = false;
        _filter = false;
        QuestionList = AllQuestions;
    }

    private List<string> ExtractCategories(List<QuestionToApproveDTO> questionModel)
    {
        return questionModel.Select(cat => cat.CategoryName).Distinct().ToList();
    }
}
