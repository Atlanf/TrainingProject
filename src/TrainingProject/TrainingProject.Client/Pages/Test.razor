@page "/Test/"
@page "/Test/{testId}"

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Test</h3>

@if (TestQuestions != null)
{
    @*for (int i = 0; i < TestQuestions.Count; i++)
        {
            int pageIndex = i + 1;
            <button value="@pageIndex" @onclick="(() => _currentPage = pageIndex)">@pageIndex</button>
        }*@
    int index = 0;

    @*<QuestionComponent QuestionModel="TestQuestions[_currentPage - 1]" ComponentId="_currentPage - 1" OnAnswer="AnswerQuestion" />*@

    foreach (var question in TestQuestions)
    {
        <QuestionComponent QuestionModel="question" ComponentId="index++" OnAnswer="AnswerQuestion" />
    }
    <button class="btn btn-primary" @onclick="FinishTest">Finish</button>
    <label>@_currentPage</label>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@code {
    [CascadingParameter] Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public string TestId { get; set; }

    private string UserName { get; set; }

    public List<QuestionDTO> TestQuestions { get; set; }

    public UserAnswersDTO ResultingAnswers { get; set; }

    public List<AnswerResultDTO> UserAnswers { get; set; }

    public AnswerResultDTO AnswerResult { get; set; }

    public bool ErrorOccured { get; set; } = false;
    public string ErrorMessage { get; set; }

    private int _currentPage { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync($"api/Test/{TestId}");
        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
            ErrorMessage = ex.Message;
            return;
        }

        TestQuestions = await response.Content.ReadAsJsonAsync<List<QuestionDTO>>();

        UserAnswers = new List<AnswerResultDTO>();

        foreach (var test in TestQuestions)
        {
            UserAnswers.Add(new AnswerResultDTO
            {
                QuestionId = test.QuestionId,
                IsCorrect = false
            });
        };
    }

    protected async Task AnswerQuestion(HelperAnswerResult answerModel)
    {
        UserAnswers[answerModel.QuestionPosition] = answerModel.AnswerResult;
        if (_currentPage < TestQuestions.Count)
        {
            _currentPage++;
        }
        else
        {
            // Call modal form with submit to finish test
            await FinishTest();
        }
    }

    protected async Task FinishTest()
    {
        ResultingAnswers = new UserAnswersDTO();
        ResultingAnswers.TestId = Convert.ToInt32(TestId);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        ResultingAnswers.UserName = user.Identity.Name;

        ResultingAnswers.UserAnswers = UserAnswers;

        var response = await HttpClient.PostJsonAsync($"api/test/finish", ResultingAnswers);

        try
        {
            response.EnsureSuccessStatusCode();
            var resultInfo = await response.Content.ReadAsJsonAsync<ResultDTO>();
            NavigationManager.NavigateTo($"result/{resultInfo.UserName}/{resultInfo.TestShortName}", false);
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
        }


        // POST
    }
}
