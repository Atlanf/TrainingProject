@page "/Test/"
@page "/Test/{testId}"

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<h3>Test</h3>

@if (TestQuestions != null)
{
    int index = 0;
    foreach (var question in TestQuestions)
    {
        <QuestionComponent QuestionModel="question" ComponentId="index++" OnAnswer="AnswerQuestion"/>
    }
    <button class="btn btn-primary" @onclick="FinishTest">Finish</button>
}
else
{
    <h2>Loading</h2>
}

@code {
    [Parameter]
    public string TestId { get; set; }

    public List<QuestionDTO> TestQuestions { get; set; }

    public List<AnswerResultDTO> UserAnswers { get; set; }

    public AnswerResultDTO AnswerResult { get; set; }

    public bool ErrorOccured { get; set; } = false;
    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var response = await HttpClient.GetAsync($"api/Test/{TestId}");
        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch(HttpRequestException ex)
        {
            ErrorOccured = true;
            ErrorMessage = ex.Message;
            return;
        }

        TestQuestions = await response.Content.ReadAsJsonAsync<List<QuestionDTO>>();

        UserAnswers = new List<AnswerResultDTO>();

        foreach (var test in TestQuestions)
        {
            UserAnswers.Add(new AnswerResultDTO
            {
                QuestionId = test.QuestionId,
                IsCorrect = false
            });
        };
    }

    protected void AnswerQuestion(HelperAnswerResult answerModel)
    {
        UserAnswers[answerModel.QuestionPosition] = answerModel.AnswerResult;
    }

    protected async Task FinishTest()
    {
        var response = await HttpClient.PostJsonAsync($"api/test/finish", UserAnswers);
        // POST
    }
}
