@page "/Test/"
@page "/Test/{testId}"

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<h3>Test</h3>

@if (TestQuestions != null)
{
    int index = 0;
    foreach (var question in TestQuestions)
    {
        <QuestionComponent QuestionModel="question" ComponentId="index++" />
        @*<QuestionComponent QuestionModel="question" SubmitAnswer="AnswerQuestion" Result="AnswerResult">
        </QuestionComponent>*@
    }
    <button @onclick="FinishTest">Finish</button>
}
else
{
    <h2>Loading</h2>
}

@code {
    [Parameter]
    public string TestId { get; set; }

    public List<QuestionDTO> TestQuestions { get; set; }

    public List<AnswerResultDTO> UserAnswers { get; set; }

    public bool ErrorOccured { get; set; }

    public AnswerResultDTO AnswerResult { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var response = await HttpClient.GetAsync($"api/Test/{TestId}");
        response.EnsureSuccessStatusCode();
        TestQuestions = await response.Content.ReadAsJsonAsync<List<QuestionDTO>>();

    }

    protected async Task AnswerQuestion(QuestionAnswerDTO answer)
    {
        try
        {
            var response = await HttpClient.PostJsonAsync($"api/Test", answer);

            response.EnsureSuccessStatusCode();

            AnswerResult = await response.Content.ReadAsJsonAsync<AnswerResultDTO>();
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
        }
    }

    protected async Task FinishTest()
    {
        var response = await HttpClient.PostJsonAsync($"api/test/finish", UserAnswers);
        // POST
    }
}
