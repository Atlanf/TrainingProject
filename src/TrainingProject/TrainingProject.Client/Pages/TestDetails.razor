@page "/TestDetails/"
@page "/TestDetails/{shortName}"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService Modal

@if (TestInfo != null)
{
    <div class="text-justify">
        <h3>Welcome to @TestInfo.Name test!</h3>
    </div>
    <div class="text-justify mr-1">
        <p>@TestInfo.TestDescription</p>
    </div>
    @if (TestInfo.QuestionsApproved > 0)
    {
        <div class="text-justify">
            <h4>
                <p>Right now this test contains @TestInfo.QuestionsApproved questions.</p>
            </h4>
        </div>
        <AuthorizeView Roles="Visitor,Administrator">
            <div class="btn-group" role="group">
                <button class="btn btn-primary" @onclick="@(() => RedirectTo("test"))">Start Test</button>
                <button class="btn btn-primary" @onclick="@(() => ShowCreatingDialog())">Add new question</button>
            </div>
        </AuthorizeView>
    }
    else
    {
        <div class="text-justify">
            <p>Sorry, right now this test has no questions available. But you can help add questions to this test.</p>
        </div>
        <AuthorizeView Roles="Visitor,Administrator">
            <button class="btn btn-primary" @onclick="@(() => ShowCreatingDialog())">Add new question</button>
        </AuthorizeView>
    }
    <br />
    <br />
    if (BestResult.CorrectAnswers != -1)
    {
        if (BestResult.TestFinished)
        {
            <div class="alert alert-success mt-2" role="alert">
                <h4 class="alert-heading">This test is completed.</h4>
                <p>You've already completed this test. Your best score is @BestResult.CorrectAnswers / @BestResult.TotalQuestions </p>
            </div>
        }
        else
        {
            <div class="alert alert-warning mt-2" role="alert">
                <h4 class="alert-heading">This test is not completed</h4>
                <p>You did not completed this test. Your best score is @BestResult.CorrectAnswers / @BestResult.TotalQuestions </p>
            </div>
        }
    }
    <br />
    if (NewQuestionAdded)
    {
        <div class="alert alert-primary mt-2" role="alert">
            <h4 class="alert-heading">Question added.</h4>
            <p>Thanks for submitting new question! If your question is going to be approved by the administration, it's going to be added to the pool of questions</p>
        </div>
    }
}
else
{
    <SpinnerComponent />
}
@code {
    [Parameter]
    public string ShortName { get; set; }

    [CascadingParameter] Task<AuthenticationState> AuthState { get; set; }

    public TestDetailsDTO TestInfo { get; set; }
    public MinimizedResultDTO BestResult { get; set; } = new MinimizedResultDTO() { CorrectAnswers = -1 };

    private bool createQuestionDialog = false;

    private bool ErrorOccured { get; set; } = false;

    private bool NewQuestionAdded { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync($"api/TestDetails/{ShortName}");

        try
        {
            response.EnsureSuccessStatusCode();
            TestInfo = await response.Content.ReadAsJsonAsync<TestDetailsDTO>();
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!string.IsNullOrWhiteSpace(user.Identity.Name))
        {
            response = await HttpClient.GetAsync($"api/result/best/{user.Identity.Name}/{TestInfo.MinimizedName}");
            try
            {
                response.EnsureSuccessStatusCode();
                BestResult = await response.Content.ReadAsJsonAsync<MinimizedResultDTO>();
            }
            catch (HttpRequestException ex)
            {
                ErrorOccured = true;
            }
        }
    }

    public void RedirectTo(string path)
    {
        NavigationManager.NavigateTo($"{path}/{TestInfo.TestId}", false);
    }

    protected async Task ShowCreatingDialog()
    {
        NewQuestionAdded = false;
        var parameters = new ModalParameters();
        parameters.Add(nameof(CreateQuestionDialogComponent.TestId), TestInfo.TestId.ToString());

        createQuestionDialog = true;

        var formModal = Modal.Show<CreateQuestionDialogComponent>(TestInfo.Name, parameters);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            NewQuestionAdded = true;
            await CreateQuestionAsync(result.Data as CreateQuestionDTO);
        }
    }

    private async Task CreateQuestionAsync(CreateQuestionDTO questionModel)
    {
        var response = await HttpClient.PostJsonAsync($"api/CreateQuestion", questionModel);

        response.EnsureSuccessStatusCode();
    }

}
