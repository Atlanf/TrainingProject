@page "/TestDetails/"
@page "/TestDetails/{shortName}"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IModalService Modal

@if (TestInfo != null)
{
    <h3>@TestInfo.Name</h3>

    <h2>@TestInfo.QuestionsApproved</h2>
    <AuthorizeView Roles="Visitor,Administrator">
        <button @onclick="@(() => RedirectTo("test"))">Start Test</button>
        <button @onclick="@(() => ShowCreatingDialog())">Add new question</button>
    </AuthorizeView>
}
else
{
    <h3>Loading...</h3>
}
@code {
    [Parameter]
    public string ShortName { get; set; }

    public TestDetailsDTO TestInfo { get; set; }

    private bool createQuestionDialog = false;

    private bool ErrorOccured { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync($"api/TestDetails/{ShortName}");

        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
        }

        TestInfo = await response.Content.ReadAsJsonAsync<TestDetailsDTO>();
    }

    public void RedirectTo(string path)
    {
        NavigationManager.NavigateTo($"{path}/{TestInfo.TestId}", false);
    }

    protected async Task ShowCreatingDialog()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CreateQuestionDialogComponent.TestId), TestInfo.TestId.ToString());

        createQuestionDialog = true;

        var formModal = Modal.Show<CreateQuestionDialogComponent>(TestInfo.Name, parameters);

        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await CreateQuestionAsync(result.Data as CreateQuestionDTO);
        }
    }

    private async Task CreateQuestionAsync(CreateQuestionDTO questionModel)
    {
        var response = await HttpClient.PostJsonAsync($"api/CreateQuestion", questionModel);

        response.EnsureSuccessStatusCode();
    }

}
