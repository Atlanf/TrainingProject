@page "/"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search by test name" @bind-value="_searchTerm" aria-describedby="basic-addon-2" />
    <div class="input-group-append btn-group">
        <button class="btn btn-primary" @onclick="ProcessSearch">Search</button>
        <button class="btn btn-primary" @onclick="ClearSearchTerm">Clear</button>
        <select class="custom-select" id="filterSelect" @onchange="ProcessFilter">
            @if (testCategoryList != null)
            {
                <option value="" selected></option>
                @foreach (var cat in testCategoryList)
                {
                    <option value="@cat.CategoryName">@cat.CategoryName</option>
                }
            }
        </select>
    </div>
</div>


<div class="container">
    @if (testWithCategory != null)
    {
        if (testWithCategory.Count != 0)
        {
            if (_searchTerm != "")
            {
                <h3 class="content h3">Search rusult for "@_searchTerm": </h3>
            }
            <div class="card-deck mb-3 text-center">
                @foreach (var item in testWithCategory)
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4 class="my-0 font-weight-normal">@item.CategoryName</h4>
                        </div>

                        <div class="card-body">
                            <ul class="list-unstyled mt-3 mb-4">
                                @{
                                    var names = item.TestFullNames.Zip(item.TestShortNames, (f, s) => new { Full = f, Short = s });
                                }
                                @foreach (var name in names)
                                {
                                    <li style="color: red; display: list-item">
                                        <NavLink href="" class="nav-link" @onclick="@(e => RedirectTo(name.Short))">
                                            @name.Full
                                        </NavLink>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <h3 class="content h3">Nothing has been found for "@_searchTerm"</h3>
        }

    }
    else
    {
        <SpinnerComponent/>
    }

</div>

@code{
    List<TestCategoryDTO> testWithCategory { get; set; } = null;

    List<TestCategoryDTO> testCategoryList { get; set; } = null;

    private string _searchTerm = "";
    private bool _filter = false;
    private bool _search = false;

    private bool ErrorOccured { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync($"api/Index");

        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (HttpRequestException ex)
        {
            ErrorOccured = true;
        }

        testCategoryList = await response.Content.ReadAsJsonAsync<List<TestCategoryDTO>>();

        testWithCategory = testCategoryList;
    }

    public void RedirectTo(string shortName)
    {
        NavigationManager.NavigateTo($"TestDetails/{shortName}", false);
    }

    public void ProcessSearch()
    {
        if (_searchTerm == "")
        {
            _search = false;
            testWithCategory = testCategoryList;
        }
        else
        {
            _search = true;
            if (!_filter)
            {
                testWithCategory = testCategoryList;
            }
            var searchResult = new List<TestCategoryDTO>();
            foreach (var cat in testWithCategory)
            {
                var names = cat.TestFullNames.Zip(cat.TestShortNames, (f, s) => new { Full = f, Short = s });
                List<string> fullNames = new List<string>();
                List<string> shortNames = new List<string>();
                foreach (var n in names)
                {
                    if (n.Full.ToLower().Contains(_searchTerm.ToLower()))
                    {
                        fullNames.Add(n.Full);
                        shortNames.Add(n.Short);
                    }
                }
                if (fullNames.Count > 0)
                {
                    searchResult.Add(new TestCategoryDTO()
                    {
                        CategoryName = cat.CategoryName,
                        TestFullNames = fullNames,
                        TestShortNames = shortNames
                    });
                }
            }
            testWithCategory = searchResult;
        }
    }

    // TODO: Searching 2 times in a row without clearing searhing line causes "cant find anything"
    public void ProcessFilter(ChangeEventArgs e)
    {
        var filterTerm = e.Value.ToString();
        var filterResult = new TestCategoryDTO();
        if (filterTerm == "")
        {
            _filter = false;
            if (_search)
            {
                ProcessSearch();
            }
        }
        else
        {
            _filter = true;
            testWithCategory = testCategoryList;

            if (_search)
            {
                ProcessSearch();
            }

            testWithCategory = testWithCategory
                .Where(category => category.CategoryName == filterTerm)
                .ToList();


            //filterResult = testWithCategory
            //    .Where(category => category.CategoryName == filterTerm)
            //    .FirstOrDefault();
            //testWithCategory.Add(filterResult);
        }
    }

    public void ClearSearchTerm()
    {
        _searchTerm = "";
        _filter = false;
        _search = false;
        testWithCategory = testCategoryList;
    }
}

